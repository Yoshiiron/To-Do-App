{"ast":null,"code":"var _jsxFileName = \"/home/yoshiiron/code/first_try_with_react/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Состояние для хранения введённого пути (например, /hello?name=Ivan)\n  const [path, setPath] = useState(\"\");\n  // Состояние для хранения полученных сообщений от сервера\n  const [messages, setMessages] = useState([]);\n\n  // Функция для отправки GET-запроса на сервер и получения сообщения\n  const fetchMessage = () => {\n    fetch(`http://localhost:8080${path}`) // Отправляем запрос на сервер по введённому пути\n    .then(resp => {\n      if (!resp.ok) {\n        // Если сервер вернул ошибку, выбрасываем исключение\n        throw new Error(`Ошибка сервера: ${resp.status}`);\n      }\n      return resp.json(); // Преобразуем ответ в JSON\n    }).then(data => {\n      if (data.message) {\n        // Если в ответе есть поле message, добавляем его в список сообщений\n        setMessages(prev => [...prev, data.message]);\n      } else {\n        // Если поле message отсутствует, выводим предупреждение\n        console.warn('Нет поля message в ответе:', data);\n      }\n    }).catch(error => {\n      // Обработка ошибок запроса\n      console.error('Ошибка при получении данных:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043E\\u0442\\u0432\\u0435\\u0442\\u043E\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0438\\u043C\\u044F\",\n      value: path,\n      onChange: e => setPath(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchMessage,\n      children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u0412\\u044B \\u0443\\u0436\\u0435 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0438\\u043B\\u0438 \", messages.length, \" \\u043E\\u0442\\u0432\\u0435\\u0442\\u043E\\u0432!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(message =>\n      /*#__PURE__*/\n      // Используем message в качестве ключа (если сообщения уникальны)\n      _jsxDEV(\"li\", {\n        children: [message, \" \"]\n      }, message.message, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MzJeQgbxhVy9LmZ9uLkP8xjmE6c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","path","setPath","messages","setMessages","fetchMessage","fetch","then","resp","ok","Error","status","json","data","message","prev","console","warn","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","length","map","_c","$RefreshReg$"],"sources":["/home/yoshiiron/code/first_try_with_react/frontend/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nfunction App() {\n  // Состояние для хранения введённого пути (например, /hello?name=Ivan)\n  const [path, setPath] = useState(\"\");\n  // Состояние для хранения полученных сообщений от сервера\n  const [messages, setMessages] = useState([]);\n\n  // Функция для отправки GET-запроса на сервер и получения сообщения\n  const fetchMessage = () => {\n    fetch(`http://localhost:8080${path}`) // Отправляем запрос на сервер по введённому пути\n      .then(resp => {\n        if (!resp.ok) {\n          // Если сервер вернул ошибку, выбрасываем исключение\n          throw new Error(`Ошибка сервера: ${resp.status}`);\n        }\n        return resp.json(); // Преобразуем ответ в JSON\n      })\n      .then(data => {\n        if (data.message) {\n          // Если в ответе есть поле message, добавляем его в список сообщений\n          setMessages(prev => [...prev, data.message]);\n        } else {\n          // Если поле message отсутствует, выводим предупреждение\n          console.warn('Нет поля message в ответе:', data);\n        }\n      })\n      .catch(error => {\n        // Обработка ошибок запроса\n        console.error('Ошибка при получении данных:', error);\n      })\n  };\n\n  return (\n    <div>\n      <h1>Список ответов</h1>\n\n      {/* Поле ввода для пути запроса */}\n      <input\n        type=\"text\"\n        placeholder=\"Введите имя\"\n        value={path}\n        onChange={(e) => setPath(e.target.value)}\n      />\n\n      {/* Кнопка для отправки запроса */}\n      <button onClick={fetchMessage}>Отправить</button>\n\n      {/* Отображение количества полученных сообщений */}\n      <p>Вы уже получили {messages.length} ответов!</p>\n      \n      {/* Список полученных сообщений */}\n      <ul>\n        {messages.map((message) => (\n          // Используем message в качестве ключа (если сообщения уникальны)\n          <li key={message.message}>{message}{\" \"}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC;EACA,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzBC,KAAK,CAAC,wBAAwBL,IAAI,EAAE,CAAC,CAAC;IAAA,CACnCM,IAAI,CAACC,IAAI,IAAI;MACZ,IAAI,CAACA,IAAI,CAACC,EAAE,EAAE;QACZ;QACA,MAAM,IAAIC,KAAK,CAAC,mBAAmBF,IAAI,CAACG,MAAM,EAAE,CAAC;MACnD;MACA,OAAOH,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;MACZ,IAAIA,IAAI,CAACC,OAAO,EAAE;QAChB;QACAV,WAAW,CAACW,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,IAAI,CAACC,OAAO,CAAC,CAAC;MAC9C,CAAC,MAAM;QACL;QACAE,OAAO,CAACC,IAAI,CAAC,4BAA4B,EAAEJ,IAAI,CAAC;MAClD;IACF,CAAC,CAAC,CACDK,KAAK,CAACC,KAAK,IAAI;MACd;MACAH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;EACN,CAAC;EAED,oBACErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGvB1B,OAAA;MACE2B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,+DAAa;MACzBC,KAAK,EAAE1B,IAAK;MACZ2B,QAAQ,EAAGC,CAAC,IAAK3B,OAAO,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eAGF1B,OAAA;MAAQiC,OAAO,EAAE1B,YAAa;MAAAe,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAGjD1B,OAAA;MAAAsB,QAAA,GAAG,mFAAgB,EAACjB,QAAQ,CAAC6B,MAAM,EAAC,8CAAS;IAAA;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAGjD1B,OAAA;MAAAsB,QAAA,EACGjB,QAAQ,CAAC8B,GAAG,CAAEnB,OAAO;MAAA;MACpB;MACAhB,OAAA;QAAAsB,QAAA,GAA2BN,OAAO,EAAE,GAAG;MAAA,GAA9BA,OAAO,CAACA,OAAO;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACxB,EAAA,CA3DQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}